// Copyright (c) 2014 Silicon Studio Corp. (http://siliconstudio.co.jp)
// This file is distributed under GPL v3. See LICENSE.md for details.
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using SiliconStudio.Core.Diagnostics;

namespace SiliconStudio.Assets
{
    /// <summary>
    /// Describes the importer that will import an <see cref="AssetToImport"/> and 
    /// the generated list of assets to import.
    /// </summary>
    [DebuggerDisplay("Importer: {Importer.GetType().Name} Items: [{Items.Count}]")]
    public class AssetToImportByImporter
    {
        private readonly IAssetImporter importer;

        internal AssetToImportByImporter(AssetToImport parent, IAssetImporter importer, AssetItem previousItem = null)
        {
            if (parent == null) throw new ArgumentNullException("parent");
            if (importer == null) throw new ArgumentNullException("importer");
            this.Parent = parent;
            this.importer = importer;
            this.Items = new List<AssetToImportMergeGroup>();
            Enabled = true;
            Log = new LoggerResult(string.Format("{0} Importer", importer.Name));
            ImporterParameters = importer.GetDefaultParameters(previousItem != null);
            ImporterParameters.Logger = Log;
            PreviousItems = new List<AssetItem>();
            if (previousItem != null)
            {
                PreviousItems.Add(previousItem);
            }
        }

        /// <summary>
        /// Gets the parent.
        /// </summary>
        /// <value>The parent.</value>
        public AssetToImport Parent { get; private set; }

        /// <summary>
        /// Gets the importer used.
        /// </summary>
        /// <value>The importer.</value>
        public IAssetImporter Importer
        {
            get
            {
                return importer;
            }
        }

        /// <summary>
        /// Gets the importer parameters.
        /// </summary>
        /// <value>The importer parameters.</value>
        public AssetImporterParameters ImporterParameters { get; private set; }

        /// <summary>
        /// Gets the log.
        /// </summary>
        /// <value>The log.</value>
        public LoggerResult Log { get; private set; }

        /// <summary>
        /// Gets a value indicating whether this instance has errors.
        /// </summary>
        /// <value><c>true</c> if this instance has errors; otherwise, <c>false</c>.</value>
        public bool HasErrors
        {
            get
            {
                return Log.HasErrors || Items.Any(item => item.Log.HasErrors);
            }
        }

        /// <summary>
        /// Gets the list of previous items imported by this file and importer.
        /// </summary>
        /// <value>The previous item.</value>
        public List<AssetItem> PreviousItems { get; private set; }

        /// <summary>
        /// Gets the list of asset items generated by this importer.
        /// </summary>
        /// <value>The items.</value>
        public List<AssetToImportMergeGroup> Items { get; private set; }

        /// <summary>
        /// Gets or sets a value indicating whether this <see cref="AssetToImportByImporter"/> is enabled.
        /// </summary>
        /// <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        public bool Enabled { get; set; }
    }
}